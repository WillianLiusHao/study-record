(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{259:function(v,_,t){"use strict";t.r(_);var s=t(6),r=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"浏览器跨域"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器跨域"}},[v._v("#")]),v._v(" 浏览器跨域")]),v._v(" "),_("h2",{attrs:{id:"相关"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#相关"}},[v._v("#")]),v._v(" 相关")]),v._v(" "),_("ul",[_("li",[v._v("什么是跨域")]),v._v(" "),_("li",[v._v("为什么会跨域")]),v._v(" "),_("li",[v._v("为什么有跨域限制")]),v._v(" "),_("li",[v._v("怎么解决跨域")])]),v._v(" "),_("h2",{attrs:{id:"回答关键点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#回答关键点"}},[v._v("#")]),v._v(" 回答关键点")]),v._v(" "),_("p",[_("strong",[v._v("关键词："),_("code",[v._v("CORS")]),v._v(" "),_("code",[v._v("同源策略")])])]),v._v(" "),_("p",[v._v("跨域问题的来源是浏览器为了请求安全而引入的基于同源策略的安全特性。"),_("br"),v._v("\n当页面和请求的协议、主机名或端口不同时，浏览器判定两者不同源，即为跨域请求。需要注意的是跨域是浏览器的限制，服务端并不受此影响。"),_("br"),v._v("\n当产生跨域时，我们可以通过 JSONP、CORS、postMessage 等方式解决。")]),v._v(" "),_("h3",{attrs:{id:"同源策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[v._v("#")]),v._v(" 同源策略")]),v._v(" "),_("ul",[_("li",[v._v("定义：协议-主机-端口 其中一个不同则判断为跨域")]),v._v(" "),_("li",[v._v("原由：出于安全考虑，降低页面被攻击的可能性")]),v._v(" "),_("li",[v._v("注意：\n"),_("ul",[_("li",[v._v("是浏览器之间的限制，服务器不存在")]),v._v(" "),_("li",[v._v("请求发出了，服务器也响应了，只是浏览器不接收")])])]),v._v(" "),_("li",[v._v("解决：\n"),_("ul",[_("li",[_("strong",[v._v("cors")]),v._v("："),_("code",[v._v("Access-Control-Allow-*")])]),v._v(" "),_("li",[_("strong",[v._v("反向代理")]),v._v("：利用同源服务器对请求做一个转发处理，进而将跨域请求转换成同源请求")]),v._v(" "),_("li",[_("strong",[v._v("jsonp")]),v._v("：只支持 "),_("code",[v._v("get")])])])])])])}),[],!1,null,null,null);_.default=r.exports}}]);